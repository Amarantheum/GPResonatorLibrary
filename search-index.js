var searchIndex = JSON.parse('{\
"bode_plot":{"doc":"A simple library for displaying bode plots in windows. …","t":[17,17,5,5,5,5,5,0,8,8,10,10],"n":["DEFAULT_HEIGHT","DEFAULT_WIDTH","create_generic_plot","create_generic_plot_scatter","create_log_plot","create_plot","create_simulation_plot","plot","BodePlotTransferFunction","LTISystem","get_value","process"],"q":["bode_plot","","","","","","","","bode_plot::plot","","",""],"d":["Default window height in pixels","Default window width in pixels","","","Asynchronously opens a window displaying the bode plot of …","Asynchronously opens a window displaying the bode plot of …","","","Trait for objects that can be interpretted as a plotable …","","Takes a complex value on the Z plane and returns the …",""],"i":[0,0,0,0,0,0,0,0,0,0,9,10],"f":[0,0,[[1,2,2,3,[5,[4]],[5,[4]]],[[8,[[7,[6]]]]]],[[1,2,2,3,3,[5,[4]],[5,[4]]],[[8,[[7,[6]]]]]],[[1,2,2,[3,[9]]],[[8,[[7,[6]]]]]],[[1,2,2,[3,[9]]],[[8,[[7,[6]]]]]],[[1,2,2,[3,[10]]],[[8,[[7,[6]]]]]],0,0,0,[[[11,[4]]],[[11,[4]]]],[3,[[3,[4]]]]],"p":[[3,"String"],[15,"usize"],[3,"Vec"],[15,"f64"],[3,"Range"],[8,"Error"],[3,"Box"],[4,"Result"],[8,"BodePlotTransferFunction"],[8,"LTISystem"],[3,"Complex"]]},\
"gp_resonator":{"doc":"This crate contains abstractions for creating general …","tn":["Complex","abs","abs","acos","acos","acos","acosh","acosh","acosh","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","arg","arg","argument","as_","asin","asin","asin","asinh","asinh","asinh","atan","atan","atan","atanh","atanh","atanh","borrow","borrow_mut","cbrt","cbrt","cbrt","ceil","cis","clone","clone_into","conj","conj","conjugate","cos","cos","cos","cosh","cosh","cosh","default","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","eq","exp","exp","exp","exp2","exp2","exp2","exp_m1","expf","expf","extract","extract_unchecked","fdiv","finv","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fract","from","from","from","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_polar","from_real","from_simd_real","from_simd_real","from_simd_real","from_simd_real","from_simd_real","from_simd_real","from_simd_real","from_simd_real","from_simd_real","from_str","from_str_radix","from_subset","from_superset_unchecked","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","hash","hypot","i","im","im","imaginary","into","inv","inv","inv","is_finite","is_finite","is_finite","is_in_subset","is_in_subset","is_infinite","is_infinite","is_nan","is_nan","is_normal","is_normal","is_one","is_zero","l1_norm","l1_norm","lanes","ln","ln","ln","ln_1p","log","log","log","log10","log10","log10","log2","log2","log2","modulus","modulus_squared","mul","mul","mul","mul","mul","mul","mul","mul","mul_add","mul_add","mul_add","mul_add_assign","mul_add_assign","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","new","norm","norm","norm1","norm_sqr","norm_squared","one","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","powc","powc","powc","powf","powf","powf","powi","powi","powi","powu","product","product","re","re","real","recip","recip","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","replace","replace_unchecked","resonator","resonator_array","round","scale","scale","scale_mut","select","set_one","set_zero","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_acos","simd_acos","simd_acos","simd_acos","simd_acos","simd_acos","simd_acos","simd_acos","simd_acos","simd_acosh","simd_acosh","simd_acosh","simd_acosh","simd_acosh","simd_acosh","simd_acosh","simd_acosh","simd_acosh","simd_argument","simd_argument","simd_argument","simd_argument","simd_argument","simd_argument","simd_argument","simd_argument","simd_argument","simd_asin","simd_asin","simd_asin","simd_asin","simd_asin","simd_asin","simd_asin","simd_asin","simd_asin","simd_asinh","simd_asinh","simd_asinh","simd_asinh","simd_asinh","simd_asinh","simd_asinh","simd_asinh","simd_asinh","simd_atan","simd_atan","simd_atan","simd_atan","simd_atan","simd_atan","simd_atan","simd_atan","simd_atan","simd_atanh","simd_atanh","simd_atanh","simd_atanh","simd_atanh","simd_atanh","simd_atanh","simd_atanh","simd_atanh","simd_cbrt","simd_cbrt","simd_cbrt","simd_cbrt","simd_cbrt","simd_cbrt","simd_cbrt","simd_cbrt","simd_cbrt","simd_ceil","simd_ceil","simd_ceil","simd_ceil","simd_ceil","simd_ceil","simd_ceil","simd_ceil","simd_ceil","simd_conjugate","simd_conjugate","simd_conjugate","simd_conjugate","simd_conjugate","simd_conjugate","simd_conjugate","simd_conjugate","simd_conjugate","simd_cos","simd_cos","simd_cos","simd_cos","simd_cos","simd_cos","simd_cos","simd_cos","simd_cos","simd_cosc","simd_cosh","simd_cosh","simd_cosh","simd_cosh","simd_cosh","simd_cosh","simd_cosh","simd_cosh","simd_cosh","simd_coshc","simd_exp","simd_exp","simd_exp","simd_exp","simd_exp","simd_exp","simd_exp","simd_exp","simd_exp","simd_exp2","simd_exp2","simd_exp2","simd_exp2","simd_exp2","simd_exp2","simd_exp2","simd_exp2","simd_exp2","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_floor","simd_floor","simd_floor","simd_floor","simd_floor","simd_floor","simd_floor","simd_floor","simd_floor","simd_fract","simd_fract","simd_fract","simd_fract","simd_fract","simd_fract","simd_fract","simd_fract","simd_fract","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_hypot","simd_hypot","simd_hypot","simd_hypot","simd_hypot","simd_hypot","simd_hypot","simd_hypot","simd_hypot","simd_imaginary","simd_imaginary","simd_imaginary","simd_imaginary","simd_imaginary","simd_imaginary","simd_imaginary","simd_imaginary","simd_imaginary","simd_ln","simd_ln","simd_ln","simd_ln","simd_ln","simd_ln","simd_ln","simd_ln","simd_ln","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_log","simd_log","simd_log","simd_log","simd_log","simd_log","simd_log","simd_log","simd_log","simd_log10","simd_log10","simd_log10","simd_log10","simd_log10","simd_log10","simd_log10","simd_log10","simd_log10","simd_log2","simd_log2","simd_log2","simd_log2","simd_log2","simd_log2","simd_log2","simd_log2","simd_log2","simd_modulus","simd_modulus","simd_modulus","simd_modulus","simd_modulus","simd_modulus","simd_modulus","simd_modulus","simd_modulus","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_mul_add","simd_mul_add","simd_mul_add","simd_mul_add","simd_mul_add","simd_mul_add","simd_mul_add","simd_mul_add","simd_mul_add","simd_norm1","simd_norm1","simd_norm1","simd_norm1","simd_norm1","simd_norm1","simd_norm1","simd_norm1","simd_norm1","simd_powc","simd_powc","simd_powc","simd_powc","simd_powc","simd_powc","simd_powc","simd_powc","simd_powc","simd_powf","simd_powf","simd_powf","simd_powf","simd_powf","simd_powf","simd_powf","simd_powf","simd_powf","simd_powi","simd_powi","simd_powi","simd_powi","simd_powi","simd_powi","simd_powi","simd_powi","simd_powi","simd_real","simd_real","simd_real","simd_real","simd_real","simd_real","simd_real","simd_real","simd_real","simd_recip","simd_recip","simd_recip","simd_recip","simd_recip","simd_recip","simd_recip","simd_recip","simd_recip","simd_round","simd_round","simd_round","simd_round","simd_round","simd_round","simd_round","simd_round","simd_round","simd_scale","simd_scale","simd_scale","simd_scale","simd_scale","simd_scale","simd_scale","simd_scale","simd_scale","simd_signum","simd_sin","simd_sin","simd_sin","simd_sin","simd_sin","simd_sin","simd_sin","simd_sin","simd_sin","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sinc","simd_sinh","simd_sinh","simd_sinh","simd_sinh","simd_sinh","simd_sinh","simd_sinh","simd_sinh","simd_sinh","simd_sinh_cosh","simd_sinh_cosh","simd_sinh_cosh","simd_sinh_cosh","simd_sinh_cosh","simd_sinh_cosh","simd_sinh_cosh","simd_sinh_cosh","simd_sinh_cosh","simd_sinhc","simd_sqrt","simd_sqrt","simd_sqrt","simd_sqrt","simd_sqrt","simd_sqrt","simd_sqrt","simd_sqrt","simd_sqrt","simd_tan","simd_tan","simd_tan","simd_tan","simd_tan","simd_tan","simd_tan","simd_tan","simd_tan","simd_tanh","simd_tanh","simd_tanh","simd_tanh","simd_tanh","simd_tanh","simd_tanh","simd_tanh","simd_tanh","simd_to_exp","simd_to_polar","simd_trunc","simd_trunc","simd_trunc","simd_trunc","simd_trunc","simd_trunc","simd_trunc","simd_trunc","simd_trunc","simd_unscale","simd_unscale","simd_unscale","simd_unscale","simd_unscale","simd_unscale","simd_unscale","simd_unscale","simd_unscale","sin","sin","sin","sin_cos","sinh","sinh","sinh","sinh_cosh","splat","sqrt","sqrt","sqrt","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","tan","tan","tan","tanh","tanh","tanh","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_owned","to_polar","to_string","to_subset","to_subset_unchecked","to_superset","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","trunc","try_from","try_into","try_sqrt","type_id","unscale","unscale","unscale_mut","vzip","zero","ConjPoleResonator","borrow","borrow_mut","clone","clone_into","fmt","from","from_subset","get_pole_locs","get_value","into","is_in_subset","new_polar","process","process_buf","process_single","set_arg","set_mag","to_owned","to_subset","to_subset_unchecked","try_from","try_into","type_id","vzip","ConjPoleResonatorArray","ConjPoleResonatorUpdate","add_resonator","add_resonator_raw","add_resonator_theta","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","fmt","from","from","from_subset","from_subset","get_value","into","into","is_in_subset","is_in_subset","new","process_buf","process_single","reset_state","sample_rate","set_resonator_decays","size","to_owned","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","type_id","update_resonators","vzip","vzip"],"q":["gp_resonator","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gp_resonator::resonator","","","","","","","","","","","","","","","","","","","","","","","","","gp_resonator::resonator_array","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A complex number in Cartesian form.","","","Computes the principal value of the inverse cosine of <code>self</code>.","","Computes the principal value of the inverse cosine of <code>self</code>.","","Computes the principal value of inverse hyperbolic cosine …","Computes the principal value of inverse hyperbolic cosine …","","","","","","","","","","","","","","Calculate the principal Arg of self.","","","Computes the principal value of the inverse sine of <code>self</code>.","Computes the principal value of the inverse sine of <code>self</code>.","","Computes the principal value of inverse hyperbolic sine of …","Computes the principal value of inverse hyperbolic sine of …","","","Computes the principal value of the inverse tangent of <code>self</code>…","Computes the principal value of the inverse tangent of <code>self</code>…","","Computes the principal value of inverse hyperbolic tangent …","Computes the principal value of inverse hyperbolic tangent …","","","","Computes the principal value of the cube root of <code>self</code>.","","","Create a new Complex with a given phase: <code>exp(i * phase)</code>. …","","","","Returns the complex conjugate. i.e. <code>re - i im</code>","","Computes the cosine of <code>self</code>.","Computes the cosine of <code>self</code>.","","Computes the hyperbolic cosine of <code>self</code>.","","Computes the hyperbolic cosine of <code>self</code>.","","","","","","","","","","","","","","","","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","","","Computes <code>2^(self)</code>.","","","Raises a floating point number to the complex power <code>self</code>.","","","Returns <code>self/other</code> using floating-point operations.","Returns <code>1/self</code> using floating-point operations.","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","Convert a polar representation into a complex number.","","","","","","","","","","","Parses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …","Parses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …","","","","","","","","","","","Returns imaginary unit","","Imaginary portion of the complex number","","Calls <code>U::from(self)</code>.","","Returns <code>1/self</code>","","","","Checks if the given complex number is finite","","","Checks if the given complex number is infinite","","Checks if the given complex number is NaN","","","Checks if the given complex number is normal","","","Returns the L1 norm <code>|re| + |im|</code> – the Manhattan distance …","","","Computes the principal value of natural logarithm of <code>self</code>.","","Computes the principal value of natural logarithm of <code>self</code>.","","","Returns the logarithm of <code>self</code> with respect to an arbitrary …","Returns the logarithm of <code>self</code> with respect to an arbitrary …","","Computes the principal value of log base 10 of <code>self</code>.","","","Computes the principal value of log base 2 of <code>self</code>.","","","","","","","","","","","","","","","","","","","","","","","Create a new Complex","","Calculate |self|","","Returns the square of the norm (since <code>T</code> doesn’t …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Raises <code>self</code> to a complex power.","","Raises <code>self</code> to a complex power.","","Raises <code>self</code> to a floating point power.","Raises <code>self</code> to a floating point power.","Raises <code>self</code> to a signed integer power.","","","Raises <code>self</code> to an unsigned integer power.","","","","Real portion of the complex number","","","","","","","","","","","","","","","","","","This module contains useful abstractions for resonating …","This module contains implementations for resonator arrays.","","Multiplies <code>self</code> by the scalar <code>t</code>.","","","","","","","","","","","","","","","Computes the principal value of the inverse cosine of <code>self</code>.","Computes the principal value of the inverse cosine of <code>self</code>.","Computes the principal value of the inverse cosine of <code>self</code>.","","Computes the principal value of the inverse cosine of <code>self</code>.","Computes the principal value of the inverse cosine of <code>self</code>.","Computes the principal value of the inverse cosine of <code>self</code>.","Computes the principal value of the inverse cosine of <code>self</code>.","Computes the principal value of the inverse cosine of <code>self</code>.","Computes the principal value of inverse hyperbolic cosine …","Computes the principal value of inverse hyperbolic cosine …","Computes the principal value of inverse hyperbolic cosine …","Computes the principal value of inverse hyperbolic cosine …","Computes the principal value of inverse hyperbolic cosine …","","Computes the principal value of inverse hyperbolic cosine …","Computes the principal value of inverse hyperbolic cosine …","Computes the principal value of inverse hyperbolic cosine …","","","","","","","","","","Computes the principal value of the inverse sine of <code>self</code>.","Computes the principal value of the inverse sine of <code>self</code>.","","Computes the principal value of the inverse sine of <code>self</code>.","Computes the principal value of the inverse sine of <code>self</code>.","Computes the principal value of the inverse sine of <code>self</code>.","Computes the principal value of the inverse sine of <code>self</code>.","Computes the principal value of the inverse sine of <code>self</code>.","Computes the principal value of the inverse sine of <code>self</code>.","Computes the principal value of inverse hyperbolic sine of …","Computes the principal value of inverse hyperbolic sine of …","Computes the principal value of inverse hyperbolic sine of …","","Computes the principal value of inverse hyperbolic sine of …","Computes the principal value of inverse hyperbolic sine of …","Computes the principal value of inverse hyperbolic sine of …","Computes the principal value of inverse hyperbolic sine of …","Computes the principal value of inverse hyperbolic sine of …","Computes the principal value of the inverse tangent of <code>self</code>…","Computes the principal value of the inverse tangent of <code>self</code>…","Computes the principal value of the inverse tangent of <code>self</code>…","","Computes the principal value of the inverse tangent of <code>self</code>…","Computes the principal value of the inverse tangent of <code>self</code>…","Computes the principal value of the inverse tangent of <code>self</code>…","Computes the principal value of the inverse tangent of <code>self</code>…","Computes the principal value of the inverse tangent of <code>self</code>…","Computes the principal value of inverse hyperbolic tangent …","Computes the principal value of inverse hyperbolic tangent …","Computes the principal value of inverse hyperbolic tangent …","Computes the principal value of inverse hyperbolic tangent …","Computes the principal value of inverse hyperbolic tangent …","Computes the principal value of inverse hyperbolic tangent …","","Computes the principal value of inverse hyperbolic tangent …","Computes the principal value of inverse hyperbolic tangent …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Computes the cosine of <code>self</code>.","Computes the cosine of <code>self</code>.","Computes the cosine of <code>self</code>.","Computes the cosine of <code>self</code>.","Computes the cosine of <code>self</code>.","Computes the cosine of <code>self</code>.","Computes the cosine of <code>self</code>.","","Computes the cosine of <code>self</code>.","","Computes the hyperbolic cosine of <code>self</code>.","Computes the hyperbolic cosine of <code>self</code>.","Computes the hyperbolic cosine of <code>self</code>.","Computes the hyperbolic cosine of <code>self</code>.","Computes the hyperbolic cosine of <code>self</code>.","Computes the hyperbolic cosine of <code>self</code>.","","Computes the hyperbolic cosine of <code>self</code>.","Computes the hyperbolic cosine of <code>self</code>.","","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Computes the principal value of natural logarithm of <code>self</code>.","Computes the principal value of natural logarithm of <code>self</code>.","Computes the principal value of natural logarithm of <code>self</code>.","Computes the principal value of natural logarithm of <code>self</code>.","Computes the principal value of natural logarithm of <code>self</code>.","","Computes the principal value of natural logarithm of <code>self</code>.","Computes the principal value of natural logarithm of <code>self</code>.","Computes the principal value of natural logarithm of <code>self</code>.","","","","","","","","","","","Returns the logarithm of <code>self</code> with respect to an arbitrary …","Returns the logarithm of <code>self</code> with respect to an arbitrary …","Returns the logarithm of <code>self</code> with respect to an arbitrary …","Returns the logarithm of <code>self</code> with respect to an arbitrary …","Returns the logarithm of <code>self</code> with respect to an arbitrary …","Returns the logarithm of <code>self</code> with respect to an arbitrary …","Returns the logarithm of <code>self</code> with respect to an arbitrary …","Returns the logarithm of <code>self</code> with respect to an arbitrary …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Raises <code>self</code> to a complex power.","Raises <code>self</code> to a complex power.","Raises <code>self</code> to a complex power.","Raises <code>self</code> to a complex power.","Raises <code>self</code> to a complex power.","Raises <code>self</code> to a complex power.","Raises <code>self</code> to a complex power.","","Raises <code>self</code> to a complex power.","Raises <code>self</code> to a floating point power.","Raises <code>self</code> to a floating point power.","","Raises <code>self</code> to a floating point power.","Raises <code>self</code> to a floating point power.","Raises <code>self</code> to a floating point power.","Raises <code>self</code> to a floating point power.","Raises <code>self</code> to a floating point power.","Raises <code>self</code> to a floating point power.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Computes the sine of <code>self</code>.","Computes the sine of <code>self</code>.","Computes the sine of <code>self</code>.","Computes the sine of <code>self</code>.","Computes the sine of <code>self</code>.","","Computes the sine of <code>self</code>.","Computes the sine of <code>self</code>.","Computes the sine of <code>self</code>.","","","","","","","","","","","Computes the hyperbolic sine of <code>self</code>.","Computes the hyperbolic sine of <code>self</code>.","Computes the hyperbolic sine of <code>self</code>.","Computes the hyperbolic sine of <code>self</code>.","Computes the hyperbolic sine of <code>self</code>.","","Computes the hyperbolic sine of <code>self</code>.","Computes the hyperbolic sine of <code>self</code>.","Computes the hyperbolic sine of <code>self</code>.","","","","","","","","","","","Computes the principal value of the square root of <code>self</code>.","Computes the principal value of the square root of <code>self</code>.","Computes the principal value of the square root of <code>self</code>.","Computes the principal value of the square root of <code>self</code>.","","Computes the principal value of the square root of <code>self</code>.","Computes the principal value of the square root of <code>self</code>.","Computes the principal value of the square root of <code>self</code>.","Computes the principal value of the square root of <code>self</code>.","Computes the tangent of <code>self</code>.","Computes the tangent of <code>self</code>.","Computes the tangent of <code>self</code>.","Computes the tangent of <code>self</code>.","","Computes the tangent of <code>self</code>.","Computes the tangent of <code>self</code>.","Computes the tangent of <code>self</code>.","Computes the tangent of <code>self</code>.","Computes the hyperbolic tangent of <code>self</code>.","Computes the hyperbolic tangent of <code>self</code>.","Computes the hyperbolic tangent of <code>self</code>.","Computes the hyperbolic tangent of <code>self</code>.","","Computes the hyperbolic tangent of <code>self</code>.","Computes the hyperbolic tangent of <code>self</code>.","Computes the hyperbolic tangent of <code>self</code>.","Computes the hyperbolic tangent of <code>self</code>.","","","","","","","","","","","","","","","","","","","","","Computes the sine of <code>self</code>.","","Computes the sine of <code>self</code>.","","Computes the hyperbolic sine of <code>self</code>.","","Computes the hyperbolic sine of <code>self</code>.","","","Computes the principal value of the square root of <code>self</code>.","Computes the principal value of the square root of <code>self</code>.","","","","","","","","","","","","","","","","","Computes the tangent of <code>self</code>.","Computes the tangent of <code>self</code>.","Computes the hyperbolic tangent of <code>self</code>.","","Computes the hyperbolic tangent of <code>self</code>.","","","","","","","","","","Convert to polar form (r, theta), such that …","","","","","","","","","","","","","","","","Divides <code>self</code> by the scalar <code>t</code>.","","","","","Represents a filter with 2 conjugate poles on the Z-plane …","","","","","","Returns the argument unchanged.","","Returns the locations of the two poles in the filter The …","","Calls <code>U::from(self)</code>.","","Create a new <code>ConjPoleResonator</code> given a complex number in …","","","Process a single data point given the required values from …","Set the angle of the pole of the resonator","Set the magnitude of the pole of the resonator","","","","","","","","A resonator composed of a dynamic number of …","","Add a resonator with given intensity and gain to the array.","Add a pre-built resonator to the current resonator array. …","Add a resonator with given intensity and gain to the array.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Creates a new instance of <code>ConjPoleResonatorArray</code> with …","Takes a signal and adds the output of the signal going …","Processes a single data point given the required values …","Resets the state of the internal resonators. The state of …","The sample rate of audio being passed through the resonator","Sets the decay amount for each resonator in the array to …","Returns the number of resonators in the …","","","","","","","","","","","","Updates each resonator in the array by passing each …","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,0,0,29,29,29,31,29,31,29,29,29,29,31,29,31,29,29,31,29,31,29,29,29,29,29,29,29,29,29,31,29,31,29,31,29,31,29,31,29,29,31,29],"f":[0,[1],[1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1],[[1,1]],[[1,1]],[1],[[1,1]],[1],[1],[[1,1]],[1],[1],[[1,1]],[[1,1]],[1],[1],[1],[1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[[]],[[]],[1,1],[1,1],[1,1],[1,1],[[],1],[1,1],[[]],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[[],1],[1],[[1,1]],[1],[[1,1]],[[1,1]],[1],[1],[[1,1]],[[1,1]],[1],[[1,1]],[1],[[1,1],2],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[[1,3]],[[1,3]],[[1,1],1],[1,1],[1,1],[[1,4],[[6,[5]]]],[[1,4],[[6,[5]]]],[[1,4],[[6,[5]]]],[[1,4],[[6,[5]]]],[[1,4],[[6,[5]]]],[[1,4],[[6,[5]]]],[[1,4],[[6,[5]]]],[[1,4],[[6,[5]]]],[1,1],[[]],[[],1],[[],1],[[],[[7,[1]]]],[8,[[7,[1]]]],[9,[[7,[1]]]],[10,[[7,[1]]]],[11,[[7,[1]]]],[12,[[7,[1]]]],[13,[[7,[1]]]],[14,[[7,[1]]]],[15,[[7,[1]]]],[[],1],[[],1],[[],[[1,[16]]]],[[],[[1,[17]]]],[[],[[1,[17]]]],[[],[[1,[17]]]],[[],[[1,[17]]]],[[],[[1,[17]]]],[[]],[[],[[1,[17]]]],[[],[[1,[17]]]],[18,[[6,[1]]]],[[18,19],[[6,[1]]]],[[]],[1,1],[20,[[7,[1]]]],[21,[[7,[1]]]],[19,[[7,[1]]]],[22,[[7,[1]]]],[23,[[7,[1]]]],[3,[[7,[1]]]],[1],[[1,1]],[[],1],[1],0,[1],[[]],[1],[1,1],[1],[1,2],[1,2],[1,2],[1,2],[[],2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1],[1],[[],3],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1],[1],[1],[1],[[1,1]],[[1,1]],[[1,1]],[1],[[1,1]],[1],[[1,1,1],1],[[1,1,1],1],[[1,1,1],1],[[1,1,1]],[[1,1,1]],[1],[[1,1]],[[1,1]],[1],[1],[1],[[],1],[1],[1],[1],[1],[1],[[],1],[[1,20]],[[1,20]],[[1,12]],[[1,13]],[[1,8]],[[1,13]],[[1,9]],[[1,23]],[[1,1]],[[1,21]],[[1,3]],[[1,23]],[[1,9]],[[1,14]],[[1,1]],[[1,21]],[[1,19]],[[1,19]],[[1,11]],[[1,22]],[[1,8]],[[1,8]],[[1,8]],[[1,11]],[[1,14]],[[1,15]],[[1,3]],[[1,1]],[[1,9]],[[1,12]],[[1,10]],[[1,9]],[[1,15]],[[1,10]],[[1,1]],[[1,22]],[[1,1],1],[[1,1],1],[[1,1],1],[1,1],[1,1],[1,1],[[1,12],1],[[1,12],1],[[1,12],1],[[1,19],1],[[],1],[[],1],[1],0,[1],[1,1],[1,1],[[1,1]],[1],[[1,1]],[1],[1],[1],[[1,1]],[[1,1]],[1],[[1,1]],[1],[[1,1]],[[1,3]],[[1,3]],0,0,[1,1],[1,1],[1,1],[1],[[1,1],1],[1],[1],[[[1,[17]]]],[[[1,[17]]]],[[[1,[17]]]],[[[1,[16]]]],[[]],[[[1,[17]]]],[[[1,[17]]]],[[[1,[17]]]],[[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[16]]],[[1,[16]]]],[[[1,[17]]],[[1,[17]]]],[[]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[16]]],[[1,[16]]]],[[[1,[17]]]],[[[1,[16]]]],[[[1,[17]]]],[[[1,[17]]]],[[[1,[17]]]],[[[1,[17]]]],[[[1,[17]]]],[[[1,[17]]]],[[]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[16]]],[[1,[16]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[]],[[[1,[16]]],[[1,[16]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[16]]],[[1,[16]]]],[[[1,[17]]],[[1,[17]]]],[[]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[]],[[[1,[17]]],[[1,[17]]]],[[[1,[16]]],[[1,[16]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[16]]],[[1,[16]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[]],[[[1,[17]]],[[1,[17]]]],[[]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[16]]],[[1,[16]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[]],[[[1,[16]]],[[1,[16]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[16]]],[[1,[16]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[]],[[[1,[17]]],[[1,[17]]]],[[]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[16]]],[[1,[16]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[]],[[[1,[16]]],[[1,[16]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[16]]],[[1,[16]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[16]]],[[1,[16]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[16]]],[[1,[16]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[]],[[]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[16]]],[[1,[16]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]]],[[]],[[[1,[17]]]],[[[1,[17]]]],[[[1,[17]]]],[[[1,[17]]]],[[[1,[17]]]],[[[1,[17]]]],[[[1,[16]]]],[[[1,[16]]]],[[[1,[17]]]],[[[1,[17]]]],[[[1,[17]]]],[[[1,[17]]]],[[[1,[17]]]],[[]],[[[1,[17]]]],[[[1,[17]]]],[[]],[[[1,[17]],[1,[17]]]],[[[1,[17]],[1,[17]]]],[[[1,[17]],[1,[17]]]],[[[1,[16]],[1,[16]]]],[[[1,[17]],[1,[17]]]],[[[1,[17]],[1,[17]]]],[[[1,[17]],[1,[17]]]],[[[1,[17]],[1,[17]]]],[[[1,[17]]]],[[]],[[[1,[16]]]],[[[1,[17]]]],[[[1,[17]]]],[[[1,[17]]]],[[[1,[17]]]],[[[1,[17]]]],[[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[16]]],[[1,[16]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[16]]],[[1,[16]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[]],[[[1,[16]],16],[[1,[16]]]],[[[1,[17]],17],[[1,[17]]]],[[[1,[17]],17],[[1,[17]]]],[[[1,[17]],17],[[1,[17]]]],[[[1,[17]],17],[[1,[17]]]],[[[1,[17]],17],[[1,[17]]]],[[[1,[17]],17],[[1,[17]]]],[[[1,[17]],17],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[16]]],[[1,[16]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[]],[[[1,[17]]],[[1,[17]]]],[[[1,[16]]],[[1,[16]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[16]]]],[[]],[[[1,[17]]]],[[[1,[17]]]],[[[1,[17]]]],[[[1,[17]]]],[[[1,[17]]]],[[[1,[17]]]],[[[1,[17]]]],[[[1,[17]]]],[[[1,[17]]]],[[[1,[17]]]],[[]],[[[1,[17]]]],[[[1,[16]]]],[[[1,[17]]]],[[[1,[17]]]],[[[1,[17]]]],[[[1,[17]],[1,[17]],[1,[17]]],[[1,[17]]]],[[[1,[17]],[1,[17]],[1,[17]]],[[1,[17]]]],[[]],[[[1,[17]],[1,[17]],[1,[17]]],[[1,[17]]]],[[[1,[17]],[1,[17]],[1,[17]]],[[1,[17]]]],[[[1,[17]],[1,[17]],[1,[17]]],[[1,[17]]]],[[[1,[17]],[1,[17]],[1,[17]]],[[1,[17]]]],[[[1,[16]],[1,[16]],[1,[16]]],[[1,[16]]]],[[[1,[17]],[1,[17]],[1,[17]]],[[1,[17]]]],[[[1,[16]]]],[[[1,[17]]]],[[[1,[17]]]],[[[1,[17]]]],[[[1,[17]]]],[[[1,[17]]]],[[[1,[17]]]],[[]],[[[1,[17]]]],[[[1,[17]],[1,[17]]],[[1,[17]]]],[[[1,[17]],[1,[17]]],[[1,[17]]]],[[[1,[17]],[1,[17]]],[[1,[17]]]],[[[1,[17]],[1,[17]]],[[1,[17]]]],[[[1,[17]],[1,[17]]],[[1,[17]]]],[[[1,[17]],[1,[17]]],[[1,[17]]]],[[[1,[16]],[1,[16]]],[[1,[16]]]],[[]],[[[1,[17]],[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[]],[[[1,[17]]],[[1,[17]]]],[[[1,[16]]],[[1,[16]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[12],[[[1,[17]],12],[[1,[17]]]],[[[1,[17]],12],[[1,[17]]]],[[[1,[17]],12],[[1,[17]]]],[[[1,[16]],12],[[1,[16]]]],[[[1,[17]],12],[[1,[17]]]],[[[1,[17]],12],[[1,[17]]]],[[[1,[17]],12],[[1,[17]]]],[[[1,[17]],12],[[1,[17]]]],[[[1,[17]]]],[[[1,[16]]]],[[[1,[17]]]],[[[1,[17]]]],[[[1,[17]]]],[[[1,[17]]]],[[[1,[17]]]],[[]],[[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[16]]],[[1,[16]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[16]]],[[1,[16]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[16]]],[[1,[16]]]],[[[1,[17]]],[[1,[17]]]],[[]],[[]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[16]]],[[1,[16]]]],[[[1,[17]]],[[1,[17]]]],[[]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]]],[[[1,[17]]]],[[[1,[17]]]],[[[1,[17]]]],[[[1,[16]]]],[[]],[[[1,[17]]]],[[[1,[17]]]],[[[1,[17]]]],[[]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[16]]],[[1,[16]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]]],[[[1,[17]]]],[[]],[[[1,[16]]]],[[[1,[17]]]],[[[1,[17]]]],[[[1,[17]]]],[[[1,[17]]]],[[[1,[17]]]],[[]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[]],[[[1,[17]]],[[1,[17]]]],[[[1,[16]]],[[1,[16]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[16]]],[[1,[16]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[]],[[[1,[17]]],[[1,[17]]]],[[[1,[16]]],[[1,[16]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[]],[[]],[[[1,[17]]],[[1,[17]]]],[[]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[16]]],[[1,[16]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[[1,[17]]],[[1,[17]]]],[[]],[[[1,[16]]],[[1,[16]]]],[1,1],[1,1],[1,1],[1],[1,1],[1,1],[1,1],[1],[[],1],[1,1],[1,1],[1,1],[[1,1]],[1],[1],[1],[[1,1]],[1],[[1,1]],[[1,1]],[[1,1]],[1],[[1,1]],[1],[[],1],[[],1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,[[7,[8]]]],[1,[[7,[9]]]],[1,[[7,[10]]]],[1,[[7,[11]]]],[1,[[7,[12]]]],[1,[[7,[13]]]],[1,[[7,[14]]]],[1,[[7,[15]]]],[[]],[1],[[],24],[[],7],[[]],[1,1],[1,[[7,[20]]]],[1,[[7,[21]]]],[1,[[7,[19]]]],[1,[[7,[22]]]],[1,[[7,[23]]]],[1,[[7,[3]]]],[1,1],[[],6],[[],6],[1,[[7,[1]]]],[[],25],[1,1],[1,1],[1],[[]],[[],1],0,[[]],[[]],[26,26],[[]],[[26,4],27],[[]],[[]],[26],[[26,[1,[9]]],[[1,[9]]]],[[]],[[],2],[[9,9,9],26],[[26,28],[[28,[9]]]],[26],[[26,9,9,9],9],[[26,9]],[[26,9]],[[]],[[],7],[[]],[[],6],[[],6],[[],25],[[]],0,0,[[29,9,9,9],[[6,[18]]]],[[29,26]],[[29,9,9,9],[[6,[18]]]],[[]],[[]],[[]],[[]],[29,29],[[]],[[29,4],27],[[]],[[]],[[]],[[]],[[29,[1,[9]]],[[1,[9]]]],[[]],[[]],[[],2],[[],2],[[9,3],29],[29],[[29,9,9,9],9],[29],0,[[29,9]],[29,3],[[]],[[],7],[[],7],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],25],[[],25],[[29,30]],[[]],[[]]],"p":[[3,"Complex"],[15,"bool"],[15,"usize"],[3,"Formatter"],[3,"Error"],[4,"Result"],[4,"Option"],[15,"f32"],[15,"f64"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[15,"isize"],[3,"WideF32x4"],[3,"AutoSimd"],[15,"str"],[15,"u32"],[15,"u128"],[15,"u16"],[15,"u64"],[15,"u8"],[3,"String"],[3,"TypeId"],[3,"ConjPoleResonator"],[6,"Result"],[3,"Vec"],[3,"ConjPoleResonatorArray"],[8,"FnMut"],[3,"ConjPoleResonatorUpdate"]]},\
"num_complex":{"doc":"Complex numbers.","t":[3,6,6,8,3,16,10,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,12,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,10,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Complex","Complex32","Complex64","ComplexFloat","ParseComplexError","Real","abs","abs","acos","acos","acos","acosh","acosh","acosh","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","arg","arg","arg","as_","asin","asin","asin","asinh","asinh","asinh","atan","atan","atan","atanh","atanh","atanh","borrow","borrow","borrow_mut","borrow_mut","cbrt","cbrt","cbrt","cis","clone","clone_into","conj","conj","conj","cos","cos","cos","cosh","cosh","cosh","default","description","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","eq","eq","exp","exp","exp","exp2","exp2","exp2","expf","expf","expf","fdiv","finv","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_polar","from_str","from_str_radix","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","hash","i","im","im","im","into","into","inv","inv","inv","is_finite","is_finite","is_finite","is_infinite","is_infinite","is_infinite","is_nan","is_nan","is_nan","is_normal","is_normal","is_normal","is_one","is_zero","l1_norm","l1_norm","l1_norm","ln","ln","ln","log","log","log","log10","log10","log10","log2","log2","log2","mul","mul","mul","mul","mul","mul","mul","mul","mul_add","mul_add","mul_add_assign","mul_add_assign","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","new","norm","norm_sqr","one","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","powc","powc","powc","powf","powf","powf","powi","powi","powi","powu","product","product","provide","re","re","re","recip","recip","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","scale","set_one","set_zero","sin","sin","sin","sinh","sinh","sinh","sqrt","sqrt","sqrt","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","tan","tan","tan","tanh","tanh","tanh","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_owned","to_polar","to_string","to_string","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","try_from","try_from","try_into","try_into","type_id","type_id","unscale","zero"],"q":["num_complexd":["A complex number in Cartesian form.","","","Generic trait for floating point complex numbers.","","The type used to represent the real coefficients of this …","Returns the absolute value of the number. See also …","","Computes the arccosine of a number. Return value is in …","","Computes the principal value of the inverse cosine of <code>self</code>.","Inverse hyperbolic cosine function.","Computes the principal value of inverse hyperbolic cosine …","","","","","","","","","","","","","","Computes the argument of the number.","Calculate the principal Arg of self.","","","Computes the arcsine of a number. Return value is in …","Computes the principal value of the inverse sine of <code>self</code>.","","Inverse hyperbolic sine function.","Computes the principal value of inverse hyperbolic sine of …","","Computes the arctangent of a number. Return value is in …","","Computes the principal value of the inverse tangent of <code>self</code>…","Inverse hyperbolic tangent function.","Computes the principal value of inverse hyperbolic tangent …","","","","","","Take the cubic root of a number.","","Computes the principal value of the cube root of <code>self</code>.","Create a new Complex with a given phase: <code>exp(i * phase)</code>. …","","","Computes the complex conjugate of the number.","Returns the complex conjugate. i.e. <code>re - i im</code>","","Computes the cosine of a number (in radians).","","Computes the cosine of <code>self</code>.","Hyperbolic cosine function.","","Computes the hyperbolic cosine of <code>self</code>.","","","","","","","","","","","","","","","","","Returns <code>e^(self)</code>, (the exponential function).","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","","Returns <code>2^(self)</code>.","","Computes <code>2^(self)</code>.","Returns <code>base^(self)</code>.","Raises a floating point number to the complex power <code>self</code>.","","Returns <code>self/other</code> using floating-point operations.","Returns <code>1/self</code> using floating-point operations.","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","Convert a polar representation into a complex number.","Parses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …","Parses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …","","","","","","","","Returns imaginary unit","Returns the imaginary part of the number.","","Imaginary portion of the complex number","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns <code>1/self</code>","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","","Checks if the given complex number is finite","Returns <code>true</code> if this value is positive infinity or …","","Checks if the given complex number is infinite","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Checks if the given complex number is NaN","","Returns <code>true</code> if the number is neither zero, infinite, …","Checks if the given complex number is normal","","","","Returns the L1 norm <code>|re| + |im|</code> – the Manhattan distance …","Returns the L1 norm <code>|re| + |im|</code> – the Manhattan distance …","","Returns the natural logarithm of the number.","","Computes the principal value of natural logarithm of <code>self</code>.","Returns the logarithm of the number with respect to an …","","Returns the logarithm of <code>self</code> with respect to an arbitrary …","Returns the base 10 logarithm of the number.","","Computes the principal value of log base 10 of <code>self</code>.","Returns the base 2 logarithm of the number.","","Computes the principal value of log base 2 of <code>self</code>.","","","","","","","","","","","","","","","","","","","Create a new Complex","Calculate |self|","Returns the square of the norm (since <code>T</code> doesn’t …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Raises <code>self</code> to a complex power.","Raises <code>self</code> to a complex power.","","Raises <code>self</code> to a real power.","Raises <code>self</code> to a floating point power.","","Raises <code>self</code> to a signed integer power.","","Raises <code>self</code> to a signed integer power.","Raises <code>self</code> to an unsigned integer power.","","","","Returns the real part of the number.","","Real portion of the complex number","Take the reciprocal (inverse) of a number, <code>1/x</code>. See also …","","","","","","","","","","","","","","Multiplies <code>self</code> by the scalar <code>t</code>.","","","Computes the sine of a number (in radians).","","Computes the sine of <code>self</code>.","Hyperbolic sine function.","Computes the hyperbolic sine of <code>self</code>.","","Take the square root of a number.","","Computes the principal value of the square root of <code>self</code>.","","","","","","","","","","","","","","","Computes the tangent of a number (in radians).","","Computes the tangent of <code>self</code>.","Hyperbolic tangent function.","","Computes the hyperbolic tangent of <code>self</code>.","","","","","","","","","","Convert to polar form (r, theta), such that …","","","","","","","","","","","","","","","Divides <code>self</code> by the scalar <code>t</code>.",""],"i":[0,0,0,0,0,45,45,3,45,3,3,45,3,3,3,3,3,3,3,3,3,3,3,3,3,3,45,3,3,3,45,3,3,45,3,3,45,3,3,45,3,3,3,10,3,10,45,3,3,3,3,3,45,3,3,45,3,3,45,3,3,3,10,3,3,3,3,3,3,3,3,3,3,3,3,3,10,45,3,3,45,3,3,45,3,3,3,3,3,3,3,3,3,3,3,3,10,10,3,3,3,3,10,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,45,3,3,3,10,3,3,3,45,3,3,45,3,3,45,3,3,45,3,3,3,3,45,3,3,45,3,3,45,3,3,45,3,3,45,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,45,3,3,45,3,3,45,3,3,3,3,3,10,45,3,3,45,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,45,3,3,45,3,3,45,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,45,3,3,45,3,3,3,3,3,3,3,3,3,3,3,3,3,10,3,3,3,3,3,3,3,10,3,10,3,10,3,3],"f":[0,0,0,0,0,0,[[]],[[[3,[[0,[1,2]]]]]],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[1]]],[[3,[1]]]],[[]],[[[3,[1]]],[[3,[1]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[3,[3,[[0,[4,5]]]]]],[[3,3]],[3],[[[3,[[0,[4,5]]]],3]],[[[3,[[0,[4,5]]]],[3,[[0,[4,5]]]]]],[[[3,[[0,[4,5]]]],[0,[4,5]]]],[[[3,[[0,[4,5]]]]]],[[3,[0,[4,5]]]],[[[3,[[0,[4,6]]]],[3,[[0,[4,6]]]]]],[[[3,[[0,[4,6]]]],[0,[4,6]]]],[[[3,[[0,[4,6]]]],[3,[[0,[4,6]]]]]],[[[3,[[0,[4,6]]]]]],[[]],[[[3,[1]]],1],[[[3,[[0,[1,2]]]]]],[3],[[]],[[[3,[1]]],[[3,[1]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[]],[[[3,[1]]],[[3,[1]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[1]]],[[3,[1]]]],[[]],[[[3,[1]]],[[3,[1]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[]],[[]],[[]],[[]],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[1]]],[[3,[1]]]],[1,[[3,[1]]]],[[[3,[4]]],[[3,[4]]]],[[]],[[]],[[[3,[[0,[4,5,7]]]]],[[3,[[0,[4,5,7]]]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[1]]],[[3,[1]]]],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[1]]],[[3,[1]]]],[[],[[3,[8]]]],[[[10,[9]]],11],[[3,[3,[[0,[4,5]]]]]],[[[3,[[0,[4,5]]]],3]],[[[3,[[0,[4,5]]]]]],[[[3,[[0,[4,5]]]],[0,[4,5]]]],[[3,[0,[4,5]]]],[3],[[[3,[[0,[4,5]]]],[3,[[0,[4,5]]]]]],[[3,3]],[[[3,[[0,[4,6]]]],[3,[[0,[4,6]]]]]],[[[3,[[0,[4,6]]]],[3,[[0,[4,6]]]]]],[[[3,[[0,[4,6]]]],[0,[4,6]]]],[[[3,[[0,[4,6]]]]]],[[[3,[12]],3],13],[[[10,[12]],10],13],[[]],[[[3,[1]]],[[3,[1]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[]],[[[3,[1]],1],[[3,[1]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[1]],[3,[1]]],[[3,[1]]]],[[[3,[1]]],[[3,[1]]]],[[3,14],15],[[3,14],15],[[3,14],15],[[3,14],15],[[3,14],15],[[3,14],15],[[3,14],15],[[[3,[16]],14],15],[[[10,[16]],14],15],[[[10,[17]],14],15],[18,[[20,[[3,[[0,[19,5]]]]]]]],[[],[[3,[[0,[4,5]]]]]],[[]],[[[0,[4,5]]],[[3,[[0,[4,5]]]]]],[[]],[21,[[20,[[3,[[0,[22,5]]]]]]]],[23,[[20,[[3,[[0,[22,5]]]]]]]],[24,[[20,[[3,[[0,[22,5]]]]]]]],[25,[[20,[[3,[[0,[22,5]]]]]]]],[26,[[20,[[3,[[0,[22,5]]]]]]]],[27,[[20,[[3,[[0,[22,5]]]]]]]],[28,[[20,[[3,[[0,[22,5]]]]]]]],[29,[[20,[[3,[[0,[22,5]]]]]]]],[[1,1],[[3,[1]]]],[11,[[30,[3]]]],[[11,31],[[30,[[3,[[0,[5,4]]]]]]]],[32,[[20,[[3,[[0,[22,5]]]]]]]],[33,[[20,[[3,[[0,[22,5]]]]]]]],[31,[[20,[[3,[[0,[22,5]]]]]]]],[34,[[20,[[3,[[0,[22,5]]]]]]]],[35,[[20,[[3,[[0,[22,5]]]]]]]],[36,[[20,[[3,[[0,[22,5]]]]]]]],[[[3,[37]]]],[[],[[3,[[0,[4,5]]]]]],[[]],[[[3,[[0,[1,2]]]]]],0,[[]],[[]],[[[3,[[0,[4,5,7]]]]]],[3],[[[3,[[0,[4,5,7]]]]],[[3,[[0,[4,5,7]]]]]],[[],13],[[[3,[[0,[1,2]]]]],13],[[[3,[38]]],13],[[],13],[[[3,[[0,[1,2]]]]],13],[[[3,[38]]],13],[[],13],[[[3,[38]]],13],[[[3,[[0,[1,2]]]]],13],[[],13],[[[3,[38]]],13],[[[3,[[0,[1,2]]]]],13],[[[3,[[0,[4,5]]]]],13],[[[3,[[0,[4,5]]]]],13],[[]],[[[3,[[0,[4,39]]]]],[[0,[4,39]]]],[[[3,[[0,[1,2]]]]]],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[1]]],[[3,[1]]]],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[1]],1],[[3,[1]]]],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[[0,[4,5]]]],[0,[4,5]]]],[[3,[3,[[0,[4,5]]]]]],[[3,3]],[[[3,[[0,[4,5]]]],3]],[[[3,[[0,[4,5]]]]]],[[[3,[[0,[4,5]]]],[3,[[0,[4,5]]]]]],[[3,[0,[4,5]]]],[3],[[3,3,3],[[3,[[0,[4,5,40]]]]]],[[[3,[[0,[4,5,40]]]],[3,[[0,[4,5,40]]]],[3,[[0,[4,5,40]]]]],[[3,[[0,[4,5,40]]]]]],[[[3,[[0,[4,6,41]]]],3,3]],[[[3,[[0,[4,6,41]]]],[3,[[0,[4,6,41]]]],[3,[[0,[4,6,41]]]]]],[[[3,[[0,[4,6]]]],[3,[[0,[4,6]]]]]],[[[3,[[0,[4,6]]]]]],[[[3,[[0,[4,6]]]],[3,[[0,[4,6]]]]]],[[[3,[[0,[4,6]]]],[0,[4,6]]]],[[[3,[[0,[4,5,7]]]]]],[3],[[],3],[[[3,[1]]],1],[[[3,[[0,[4,5]]]]],[[0,[4,5]]]],[[],[[3,[[0,[4,5]]]]]],[[3,23]],[[3,35]],[[3,26]],[[3,26]],[[3,34]],[[3,34]],[[3,27]],[[3,27]],[[3,36]],[[3,25]],[[3,25]],[[3,33]],[[3,36]],[[3,31]],[[[3,[1]],[3,[1]]]],[[3,33]],[[3,29]],[[3,28]],[[3,29]],[[3,28]],[[3,3]],[[3,32]],[[3,[3,[1]]]],[[[3,[1]],23]],[[3,32]],[[[3,[1]],23]],[[[3,[1]],3]],[[3,23]],[[3,35]],[[[3,[1]],21]],[[[3,[1]],21]],[[3,21]],[[3,31]],[[3,21]],[[3,24]],[[3,24]],[3,3],[[[3,[1]],[3,[1]]],[[3,[1]]]],[[[3,[[0,[1,2]]]],3],3],[[]],[[[3,[1]],1],[[3,[1]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[26],[[[3,[[0,[1,2]]]],26],[[3,[[0,[1,2]]]]]],[[[3,[[0,[4,5,7]]]],26],[[3,[[0,[4,5,7]]]]]],[[[3,[[0,[4,5]]]],31],[[3,[[0,[4,5]]]]]],[[],[[3,[[0,[5,4]]]]]],[[],[[3,[[0,[5,4]]]]]],[42],[[]],[[[3,[[0,[1,2]]]]]],0,[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[3],[[3,[3,[[0,[4,5]]]]]],[[[3,[[0,[4,5]]]],3]],[[[3,[[0,[4,5]]]],[3,[[0,[4,5]]]]]],[[3,3]],[[[3,[[0,[4,5]]]]]],[[3,[0,[4,5]]]],[[[3,[[0,[4,5]]]],[0,[4,5]]]],[[[3,[[0,[4,6]]]],[3,[[0,[4,6]]]]]],[[[3,[[0,[4,6]]]],[3,[[0,[4,6]]]]]],[[[3,[[0,[4,6]]]],[0,[4,6]]]],[[[3,[[0,[4,6]]]]]],[[[3,[[0,[4,5]]]],[0,[4,5]]],[[3,[[0,[4,5]]]]]],[[[3,[[0,[4,5]]]]]],[[[3,[[0,[4,5]]]]]],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[1]]],[[3,[1]]]],[[]],[[[3,[1]]],[[3,[1]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[1]]],[[3,[1]]]],[[[3,[[0,[4,5]]]],3]],[[3,[3,[[0,[4,5]]]]]],[[[3,[[0,[4,5]]]],[3,[[0,[4,5]]]]]],[[3,3]],[[[3,[[0,[4,5]]]],[0,[4,5]]]],[[[3,[[0,[4,5]]]]]],[[3,[0,[4,5]]]],[3],[[[3,[[0,[4,6]]]],[3,[[0,[4,6]]]]]],[[[3,[[0,[4,6]]]]]],[[[3,[[0,[4,6]]]],[3,[[0,[4,6]]]]]],[[[3,[[0,[4,6]]]],[0,[4,6]]]],[[],[[3,[[0,[5,4]]]]]],[[],[[3,[[0,[5,4]]]]]],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[1]]],[[3,[1]]]],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[1]]],[[3,[1]]]],[[[3,[[0,[18,5]]]]],[[20,[21]]]],[[[3,[[0,[18,5]]]]],[[20,[23]]]],[[[3,[[0,[18,5]]]]],[[20,[24]]]],[[[3,[[0,[18,5]]]]],[[20,[25]]]],[[[3,[[0,[18,5]]]]],[[20,[26]]]],[[[3,[[0,[18,5]]]]],[[20,[27]]]],[[[3,[[0,[18,5]]]]],[[20,[28]]]],[[[3,[[0,[18,5]]]]],[[20,[29]]]],[[]],[[[3,[1]]]],[[],43],[[],43],[[[3,[[0,[18,5]]]]],[[20,[32]]]],[[[3,[[0,[18,5]]]]],[[20,[33]]]],[[[3,[[0,[18,5]]]]],[[20,[31]]]],[[[3,[[0,[18,5]]]]],[[20,[34]]]],[[[3,[[0,[18,5]]]]],[[20,[35]]]],[[[3,[[0,[18,5]]]]],[[20,[36]]]],[[],30],[[],30],[[],30],[[],30],[[],44],[[],44],[[[3,[[0,[4,5]]]],[0,[4,5]]],[[3,[[0,[4,5]]]]]],[[],[[3,[[0,[4,5]]]]]]],"p":[[8,"Float"],[8,"FloatConst"],[3,"Complex"],[8,"Clone"],[8,"Num"],[8,"NumAssign"],[8,"Neg"],[8,"Default"],[8,"Error"],[3,"ParseComplexError"],[15,"str"],[8,"PartialEq"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[8,"Display"],[8,"ToPrimitive"],[8,"NumCast"],[4,"Option"],[15,"f32"],[8,"FromPrimitive"],[15,"f64"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[15,"isize"],[4,"Result"],[15,"u32"],[15,"u128"],[15,"u16"],[15,"u64"],[15,"u8"],[15,"usize"],[8,"Hash"],[8,"FloatCore"],[8,"Signed"],[8,"MulAdd"],[8,"MulAddAssign"],[3,"Demand"],[3,"String"],[3,"TypeId"],[8,"ComplexFloat"]]},\
"resonator_builder":{"doc":"This library contains functions for building a resonator …","t":[0,0,3,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,0,12,3,6,3,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["fft","scaled_builder","FftCalculator","borrow","borrow_mut","from","from_subset","from_subset","into","is_in_subset","is_in_subset","new","real_fft","size","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_into","type_id","vzip","window","zero_pad_length","BlackmanHarris","RealWindowFn","Rectangular","WindowFunction","borrow","borrow","borrow_mut","borrow_mut","from","from","from_subset","from_subset","from_subset","from_subset","into","into","is_in_subset","is_in_subset","is_in_subset","is_in_subset","null_window_fn","real_window","real_window","real_window","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","ScaledResonatorPlan","ScaledResonatorPlanner","borrow","borrow","borrow_mut","borrow_mut","build_resonator_array","clone","clone","clone_into","clone_into","default","empty","fmt","fmt","from","from","from_subset","from_subset","from_subset","from_subset","into","into","into_iter","is_in_subset","is_in_subset","is_in_subset","is_in_subset","iter","new","plan","resonators","to_owned","to_owned","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","with_capacity","with_max_freq","with_max_num_peaks","with_min_freq","with_min_prominence","with_min_threshold"],"q":["resonator_builder","","resonator_builder::fft","","","","","","","","","","","","","","","","","","","","","","resonator_builder::fft::window","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","resonator_builder::scaled_builder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["This module contains the <code>FftCalculator</code> and various other …","Implementation of the <code>ScaledResonatorPlanner</code> used for …","A structure for calculating FFTs","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","Construct a new Fft calculator with given size and zero …","Computes the fft of the given real-valued signal","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","A type representing a plan for building a resonator array …","A type used to plan the creation of a resonator array …","","","","","Build a resonator array from this plan.","","","","","","Initialize an empty resonator plan.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Obtain an iterator over the resonators in this plan.","Initialize a new empty resonator planner. Initializes all …","Perform the calculations with the planner to create a …","Each value corresponds to (theta, gain) for a resonator","","","","","","","","","","","","","","","","","","","Initialize an empty resonator plan with given capacity.","Set the upper bound for frequency when searching for peaks","Set the maximum number of peaks","Set the lower bound for frequency when searching for peaks","Set the prominence threshold for peaks","Set the minimum height for peaks"],"i":[0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,0,0,0,0,20,21,20,21,20,21,20,20,21,21,20,21,20,20,21,21,0,22,20,21,20,20,21,21,20,20,21,21,20,21,20,21,20,21,20,21,0,0,13,16,13,16,13,13,16,13,16,16,13,13,16,13,16,13,13,16,16,13,16,13,13,13,16,16,13,16,16,13,13,16,13,13,16,16,13,13,16,16,13,16,13,16,13,16,13,16,13,16,16,16,16,16],"f":[0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[[],1],[[2,2],[[6,[3,[5,[4]]]]]],[[3,7],[[10,[[9,[8]]]]]],0,[[],11],[[],11],[[]],[[]],[[],6],[[],6],[[],12],[[]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],12],[[],12],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[13,8],[[6,[14,15]]]],[13,13],[16,16],[[]],[[]],[[],16],[[],13],[[13,17],18],[[16,17],18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[13],[[],1],[[],1],[[],1],[[],1],[13,19],[[],16],[16,13],0,[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],12],[[],12],[[]],[[]],[2,13],[[16,8],16],[[16,2],16],[[16,8],16],[[16,8],16],[[16,8],16]],"p":[[15,"bool"],[15,"usize"],[3,"FftCalculator"],[8,"Error"],[3,"Box"],[4,"Result"],[6,"RealWindowFn"],[15,"f64"],[3,"Complex"],[3,"Vec"],[4,"Option"],[3,"TypeId"],[3,"ScaledResonatorPlan"],[3,"ConjPoleResonatorArray"],[15,"str"],[3,"ScaledResonatorPlanner"],[3,"Formatter"],[6,"Result"],[3,"Iter"],[3,"BlackmanHarris"],[3,"Rectangular"],[8,"WindowFunction"]]},\
"wav_util":{"doc":"","t":[5,5,5,5],"n":["combine_channels","read_wave","scale_audio","write_wave"],"q":["wav_util","","",""],"d":["","Read a 2 channel wav file into an array of vectors","Normalizes the signal if the maximum amplitude is greater …","Given a set of two vectors representing audio channels to …"],"i":[0,0,0,0],"f":[[[],[[2,[1]]]],[[[4,[3]]],[[7,[[6,[5]]]]]],[[]],[[[4,[3]],8],[[7,[[6,[5]]]]]]],"p":[[15,"f64"],[3,"Vec"],[3,"Path"],[8,"AsRef"],[8,"Error"],[3,"Box"],[4,"Result"],[15,"u32"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
